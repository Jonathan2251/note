diff --git a/llvm-project/clang/include/clang/Basic/BuiltinsBMC.def b/llvm-project/clang/include/clang/Basic/BuiltinsBMC.def
new file mode 100644
index 000000000..0c08aa04f
--- /dev/null
+++ b/llvm-project/clang/include/clang/Basic/BuiltinsBMC.def
@@ -0,0 +1,20 @@
+//===-- BuiltinsBMC.def - BMC Builtin function database --------*- C++ -*-==//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+//
+// This file defines the BMC-specific builtin function database. Users of
+// this file must define the BUILTIN macro to make use of this information.
+//
+//===----------------------------------------------------------------------===//
+
+// The format of this database matches clang/Basic/Builtins.def.
+
+TARGET_BUILTIN(__builtin_bmc_tensor_load0, "v", "n", "experimental-v")
+TARGET_BUILTIN(__builtin_tensor_add, "vi*i*i*", "n", "experimental-v")
+
+//#undef BUILTIN
+
diff --git a/llvm-project/clang/include/clang/Basic/BuiltinsRISCV.def b/llvm-project/clang/include/clang/Basic/BuiltinsRISCV.def
index b2b4950f9..7df1eaba2 100644
--- a/llvm-project/clang/include/clang/Basic/BuiltinsRISCV.def
+++ b/llvm-project/clang/include/clang/Basic/BuiltinsRISCV.def
@@ -17,6 +17,8 @@
 
 #include "clang/Basic/riscv_vector_builtins.inc"
 
+#include "clang/Basic/BuiltinsBMC.def"
+
 // Zbb extension
 TARGET_BUILTIN(__builtin_riscv_orc_b_32, "ZiZi", "nc", "experimental-zbb")
 TARGET_BUILTIN(__builtin_riscv_orc_b_64, "WiWi", "nc", "experimental-zbb,64bit")
diff --git a/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/_bmc-tensor-load0.c b/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/_bmc-tensor-load0.c
new file mode 100644
index 000000000..2e3736c86
--- /dev/null
+++ b/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/_bmc-tensor-load0.c
@@ -0,0 +1,13 @@
+// NOTE: ~/git/Phoenix/llvm-project/build/bin/clang -menable-experimental-extensions -march=rv64gcv0p10 -O3 -mabi=lp64d -emit-llvm -S builtins-bmc-tensor-load0.c -o -
+
+/* NOTE: cp builtins-bmc-tensor-load0.c ~/git/Phoenix/llvm-project/clang/test/. && pushd ~/git/Phoenix/llvm-project/clang/test
+~/git/Phoenix/llvm-project/build/bin/llvm-lit builtins-bmc-tensor-load0.c 
+popd */
+
+// RUN: %clang_cc1 -triple riscv64 -target-feature +f -target-feature +d -target-feature +experimental-v \
+// RUN:   -target-feature +experimental-zfh -emit-llvm %s -o - | FileCheck %s
+int foo() {
+// CHECK: call void @llvm.bmc.tensor.load0
+  __builtin_bmc_tensor_load0();
+  return 0;
+}
diff --git a/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/bmc-tensor-load0.c b/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/bmc-tensor-load0.c
new file mode 100644
index 000000000..dd3dfc7c8
--- /dev/null
+++ b/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/bmc-tensor-load0.c
@@ -0,0 +1,13 @@
+// NOTE: ~/git/Phoenix/llvm-project/build/bin/clang -menable-experimental-extensions -march=rv64gcv0p10 -O3 -mabi=lp64d -emit-llvm -S builtins-bmc-tensor-load0.c -o -
+
+/* NOTE: cp builtins-bmc-tensor-load0.c ~/git/Phoenix/llvm-project/clang/test/. && pushd ~/git/Phoenix/llvm-project/clang/test
+~/git/Phoenix/llvm-project/build/bin/llvm-lit builtins-bmc-tensor-load0.c 
+popd */
+
+// RUN: %clang -menable-experimental-extensions -march=rv64gcv0p10 -O3 \
+// RUN:   -mabi=lp64d -emit-llvm -S %s -o - | FileCheck %s
+int foo() {
+// CHECK: call void @llvm.bmc.tensor.load0
+  __builtin_bmc_tensor_load0();
+  return 0;
+}
diff --git a/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/tensor-add.c b/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/tensor-add.c
new file mode 100644
index 000000000..c98eb5205
--- /dev/null
+++ b/llvm-project/clang/test/CodeGen/RISCV/LT/BMC/tensor-add.c
@@ -0,0 +1,15 @@
+/* NOTE: ~/git/Phoenix/llvm-project/build/bin/clang -menable-experimental-extensions -march=rv64gcv0p10 -O3 -mabi=lp64d -emit-llvm -S builtins-tensor-add.c -o -
+
+cp builtins-tensor-add.c ~/git/Phoenix/llvm-project/clang/test/. && pushd ~/git/Phoenix/llvm-project/clang/test
+~/git/Phoenix/llvm-project/build/bin/llvm-lit builtins-tensor-add.c 
+popd */
+
+// RUN: %clang -menable-experimental-extensions -march=rv64gcv0p10 -O3 \
+// RUN:   -mabi=lp64d -emit-llvm -S %s -o - | FileCheck %s
+// RUN: %clang_cc1 -triple riscv64 -target-feature +f -target-feature +d -target-feature +experimental-v \
+// RUN:   -target-feature +experimental-zfh -emit-llvm %s -o - | FileCheck %s
+int foo(int *d, int *s0, int *s1) {
+// CHECK: call void @llvm.tensor.add
+  __builtin_tensor_add(d, s0, s1);
+  return 0;
+}
diff --git a/llvm-project/llvm/include/llvm/IR/Intrinsics.td b/llvm-project/llvm/include/llvm/IR/Intrinsics.td
index 28fcc1326..13b6693dd 100644
--- a/llvm-project/llvm/include/llvm/IR/Intrinsics.td
+++ b/llvm-project/llvm/include/llvm/IR/Intrinsics.td
@@ -1780,4 +1780,5 @@ include "llvm/IR/IntrinsicsBPF.td"
 include "llvm/IR/IntrinsicsSystemZ.td"
 include "llvm/IR/IntrinsicsWebAssembly.td"
 include "llvm/IR/IntrinsicsRISCV.td"
+include "llvm/IR/IntrinsicsBMC.td"
 include "llvm/IR/IntrinsicsVE.td"
diff --git a/llvm-project/llvm/include/llvm/IR/IntrinsicsBMC.td b/llvm-project/llvm/include/llvm/IR/IntrinsicsBMC.td
new file mode 100644
index 000000000..c6492d083
--- /dev/null
+++ b/llvm-project/llvm/include/llvm/IR/IntrinsicsBMC.td
@@ -0,0 +1,25 @@
+//===- IntrinsicsBMC.td - Defines BMC intrinsics ---------*- tablegen -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file defines all of the BMC-specific intrinsics.
+//
+//===----------------------------------------------------------------------===//
+
+def int_bmc_tensor_load0 : GCCBuiltin<"__builtin_bmc_tensor_load0">,
+  Intrinsic<[], [],
+  [IntrCold]>;
+
+def int_tensor_add : GCCBuiltin<"__builtin_tensor_add">,
+  Intrinsic<[], [llvm_ptr_ty, llvm_ptr_ty, llvm_ptr_ty],
+  [IntrArgMemOnly, IntrWillReturn, IntrNoFree,
+                             NoCapture<ArgIndex<0>>, NoCapture<ArgIndex<1>>,
+                             NoAlias<ArgIndex<0>>, NoAlias<ArgIndex<1>>,
+                             WriteOnly<ArgIndex<0>>, ReadOnly<ArgIndex<1>>,
+                             ReadOnly<ArgIndex<2>>,
+                             ImmArg<ArgIndex<3>>]>;
